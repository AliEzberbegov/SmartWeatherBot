import telebot
import requests
import datetime
import pytz
import random
from telebot import types
from geopy.geocoders import Nominatim

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7036019304:AAEkmicbRDHbOA0hgDEzeQ7XcnfEOCCgWvk'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_API_KEY' –Ω–∞ –≤–∞—à API –∫–ª—é—á —Å OpenWeatherMap
API_KEY = '233619f6b20bc7ebabafa99053bb28f6'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–æ–≤
user_cities = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –î–æ–±–∞–≤–∏–º –≥–µ–æ–∫–æ–¥–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
geolocator = Nominatim(user_agent="telegram-weather-bot")

weather_translation = {
    "Thunderstorm": "–ì—Ä–æ–∑–∞",
    "Drizzle": "–ú–æ—Ä–æ—Å—å",
    "Rain": "–î–æ–∂–¥—å",
    "Snow": "–°–Ω–µ–≥",
    "Mist": "–¢—É–º–∞–Ω",
    "Smoke": "–î—ã–º",
    "Haze": "–ú–≥–ª–∞",
    "Dust": "–ü—ã–ª—å",
    "Fog": "–¢—É–º–∞–Ω",
    "Sand": "–ü–µ—Å–æ–∫",
    "Ash": "–ü–µ–ø–µ–ª",
    "Squall": "–®–∫–≤–∞–ª",
    "Tornado": "–¢–æ—Ä–Ω–∞–¥–æ",
    "Clear sky": "–Ø—Å–Ω–æ",
    "Clouds": "–û–±–ª–∞—á–Ω–æ",
    "Few clouds": "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "Scattered clouds": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "Broken clouds": "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
    "Overcast clouds": "–ü–∞—Å–º—É—Ä–Ω–æ",
    "Sunny": "–°–æ–ª–Ω–µ—á–Ω–æ",
    "Partly —Åloudy": "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "Mostly —Åloudy": "–í –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±–ª–∞—á–Ω–æ",
    "Light rain": "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
    "Heavy rain": "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    "Showers": "–õ–∏–≤–µ–Ω—å",
    "Light snow": "–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥",
    "Heavy snow": "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
    "Blizzard": "–ú–µ—Ç–µ–ª—å",
    "Ice cellets": "–õ–µ–¥—è–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã",
    "Freezing rain": "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å"
}

weather_emojis = {
    "–ì—Ä–æ–∑–∞": "‚õàÔ∏è",
    "–ú–æ—Ä–æ—Å—å": "üåßÔ∏è",
    "–î–æ–∂–¥—å": "üåßÔ∏è",
    "–°–Ω–µ–≥": "‚ùÑÔ∏è",
    "–¢—É–º–∞–Ω": "üå´Ô∏è",
    "–î—ã–º": "üå´Ô∏è",
    "–ú–≥–ª–∞": "üå´Ô∏è",
    "–ü—ã–ª—å": "üå´Ô∏è",
    "–ü–µ—Å–æ–∫": "üå´Ô∏è",
    "–ü–µ–ø–µ–ª": "üå´Ô∏è",
    "–®–∫–≤–∞–ª": "üå¨Ô∏è",
    "–¢–æ—Ä–Ω–∞–¥–æ": "üå™Ô∏è",
    "–Ø—Å–Ω–æ": "‚òÄÔ∏è",
    "–û–±–ª–∞—á–Ω–æ": "‚òÅÔ∏è",
    "–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå§Ô∏è",
    "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "üå•Ô∏è",
    "–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå•Ô∏è",
    "–ü–∞—Å–º—É—Ä–Ω–æ": "‚òÅÔ∏è",
    "–°–æ–ª–Ω–µ—á–Ω–æ": "‚òÄÔ∏è",
    "–í –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±–ª–∞—á–Ω–æ": "üå•Ô∏è",
    "–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å": "üåßÔ∏è",
    "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å": "üåßÔ∏è",
    "–õ–∏–≤–µ–Ω—å": "‚õàÔ∏è",
    "–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥": "üå®Ô∏è",
    "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥": "üå®Ô∏è",
    "–ú–µ—Ç–µ–ª—å": "‚ùÑÔ∏è‚ùÑÔ∏è‚ùÑÔ∏è",
    "–õ–µ–¥—è–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã": "üå®Ô∏è",
    "–õ–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å": "üå®Ô∏è‚òî"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
def get_weather(city, days):
    base_url = "http://api.openweathermap.org/data/2.5/forecast"
    params = {
        "q": city,
        "appid": API_KEY,
        "units": "metric",
        "cnt": days * 8  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    }
    response = requests.get(base_url, params=params)
    data = response.json()
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
def get_temperature_by_time(data, target_time, forecast_index):
    for forecast in data["list"][forecast_index:forecast_index+8]:  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        forecast_time = datetime.datetime.fromtimestamp(forecast["dt"], tz=pytz.utc).astimezone(pytz.timezone('Europe/Moscow'))
        if forecast_time.strftime('%H:%M') == target_time:
            return round(forecast["main"]["temp"])
    return None

import random

def recommend_clothing(temperature, weather_description, humidity, wind_speed):
    recommendations = {
        "Cold": [["—Ç–µ–ø–ª—ã–π —Å–≤–∏—Ç–µ—Ä", "–ø—É—Ö–æ–≤–∏–∫", "—à–∞–ø–∫–∞", "—Ç–µ–ø–ª—ã–µ –∫–µ–¥—ã", "–ø–µ—Ä—á–∞—Ç–∫–∏"],
                 ["—Ç–µ–ø–ª–∞—è –∫–æ—Ñ—Ç–∞", "–∫—É—Ä—Ç–∫–∞", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ", "–¥–∂–∏–Ω—Å—ã"],
                 ["–∑–∏–º–Ω—è—è –æ–±—É–≤—å", "—Å–≤–∏—Ç—à–æ—Ç", "—Ç–µ–ø–ª—ã–µ –¥–∂–∏–Ω—Å—ã", "–º–µ—Ö–æ–≤–∞—è —à–∞–ø–∫–∞", "–∫—É—Ä—Ç–∫–∞"]],
        "Mild": [["—Å–≤–∏—Ç–µ—Ä", "–ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞", "—Ç—É—Ñ–ª–∏", "–¥–∂–∏–Ω—Å—ã", "—Ñ—É—Ç–±–æ–ª–∫–∞"],
                 ["–∫–µ–ø–∫–∞", "–¥–∂–∏–Ω—Å–æ–≤–∫–∞", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–¥–∂–∏–Ω—Å—ã", "—Ä—É–±–∞—à–∫–∞"],
                 ["–∫–µ–¥—ã", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —à—Ç–∞–Ω—ã", "—Ç–æ–ª—Å—Ç–æ–≤–∫–∞", "–∫—É—Ä—Ç–∫–∞", "—Ñ—É—Ç–±–æ–ª–∫–∞"]],
        "Warm": [["–∫–µ–ø–∫–∞", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—à–æ—Ä—Ç—ã", "–∫–µ–¥—ã", "—Å–∞–Ω–¥–∞–ª–∏–∏"],
                 ["—Å–ø–æ—Ä—Ç–∏–≤–∫–∞", "—Ñ—É—Ç–±–ª–æ–∫–∞", "—Å–ª–∞–Ω—Ü—ã", "—à–æ—Ä—Ç—ã", "—Ñ—É—Ç–±–æ–ª–∫–∞"],
                 ["–ª–µ–≥–∫–∞—è —é–±–∫–∞", "–ø–ª–∞—Ç—å–µ", "–±–æ—Å–æ–Ω–æ–∂–∫–∏", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—à–æ—Ä—Ç—ã"]],
        "Hot": [["—Ñ—É—Ç–±–æ–ª–∫–∞", "–±—Ä–∏–¥–∂–∏", "—à–ª–µ–ø–∞–Ω—Ü—ã", "—à–æ—Ä—Ç—ã", "–ª–µ–≥–∫–∏–π —Ç–æ–ø"],
                ["–ø–∞–Ω–∞–º–∞", "—à–æ—Ä—Ç—ã", "–º–∞–π–∫–∞", "–æ—á–∫–∏", "—Å–∞–Ω–¥–∞–ª–∏–∏"],
                ["–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "—Ñ—É—Ç–±–æ–ª–∫–∞", "—Å–ø–æ—Ä—Ç–∏–≤–∫–∏", "–∫–µ–ø–∫–∞", "—à–æ—Ä—Ç—ã"],
                ["–ª–µ–≥–∫–æ–µ –ø–ª–∞—Ç—å–µ", "–±–∞–ª–µ—Ç–∫–∏", "–ø–∞–Ω–∞–º–∞", "—à–æ—Ä—Ç—ã", "–æ—á–∫–∏"]],
        "Snowy": [["–∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞", "—à–∞–ø–∫–∞ —Å —É—à–∞–º–∏", "—Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏", "–≤–∞—Ä–µ–∂–∫–∏", "—à–∞—Ä—Ñ"],
                  ["–ø—É—Ö–æ–≤–∏–∫", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ", "–ø–µ—Ä—á–∞—Ç–∫–∏", "—Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏"],
                  ["–∑–∏–º–Ω–∏–π –ø–ª–∞—â", "—à–∞–ø–∫–∞", "—Ç–µ–ø–ª–∞—è –æ–±—É–≤—å", "–ø–µ—Ä—á–∞—Ç–∫–∏", "—à–∞—Ä—Ñ"]],
        "Rainy": [["–∑–æ–Ω—Ç–∏–∫", "–¥–æ–∂–¥–µ–≤–∏–∫", "–∫–µ–¥—ã", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —à—Ç–∞–Ω—ã", "—Ç–æ–ª—Å—Ç–æ–≤–∫–∞", "–∫—É—Ä—Ç–∫–∞"],
                  ["–ø–ª–∞—â", "–¥–æ–∂–¥–µ–≤–∏–∫", "–¥–∂–∏–Ω—Å–æ–≤–∫–∞", "—Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏", "—à–∞–ø–∫–∞", "—à–∞—Ä—Ñ"],
                  ["–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –∫—É—Ä—Ç–∫–∞", "—Ä–µ–∑–∏–Ω–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏", "—à–∞–ø–∫–∞", "—Ç–µ–ø–ª—ã–µ –¥–∂–∏–Ω—Å—ã", "–∑–æ–Ω—Ç–∏–∫"]],
        "Windy": [["–≤–µ—Ç—Ä–æ–≤–∫–∞", "—à–∞—Ä—Ñ", "—à–∞–ø–∫–∞", "–¥–∂–∏–Ω—Å—ã", "—Ç—É—Ñ–ª–∏"],
                  ["–≤–µ—Ç—Ä–æ–≤–∫–∞", "–ø–ª–∞—â", "—à–∞—Ä—Ñ", "–∫—É—Ä—Ç–∫–∞", "–±—Ä—é–∫–∏"],
                  ["–≤–µ—Ç—Ä–æ–≤–∫–∞", "—à–∞–ø–∫–∞", "—Ç–µ–ø–ª–∞—è –∫–æ—Ñ—Ç–∞", "—à–∞—Ä—Ñ", "–ø–µ—Ä—á–∞—Ç–∫–∏"]],
        "Very Cold": [["—Ç–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞", "—à–∞–ø–∫–∞", "—Ç–µ–ø–ª—ã–µ –±–æ—Ç–∏–Ω–∫–∏", "–ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏", "–≤–∞—Ä–µ–∂–∫–∏"],
                      ["—à–∞–ø–∫–∞", "–ø–∞–ª—å—Ç–æ", "—à–∞—Ä—Ñ", "–≤–∞—Ä–µ–∂–∫–∏", "—É–≥–≥–∏"],
                      ["—à–∞–ø–∫–∞", "—Ç–µ–ø–ª–∞—è –æ–±—É–≤—å", "—Ç–µ—Ä–º–æ–±–µ–ª—å–µ", "–ø–µ—Ä—á–∞—Ç–∫–∏", "–ø—É—Ö–æ–≤–∏–∫"],
                      ["–ø—É—Ö–æ–≤–∏–∫", "–ø–æ–¥—à—Ç–∞–Ω–Ω–∏–∫–∏", "—à–∞—Ä—Ñ", "—É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ —à—Ç–∞–Ω—ã", "–∑–∏–º–Ω–∏–µ –±–æ—Ç–∏–Ω–∫–∏"]],
        "Unknown": [["–û–±—ã—á–Ω–∞—è –æ–¥–µ–∂–¥–∞"]]
    }

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–≥–æ–¥—ã
    if temperature < -5:
        category = "Very Cold"
    elif temperature < 5:
        category = "Cold"
    elif temperature < 15:
        category = "Mild"
    elif temperature < 25:
        category = "Warm"
    else:
        category = "Hot"

    return random.choice(recommendations.get(category, [["–û–±—ã—á–Ω–∞—è –æ–¥–µ–∂–¥–∞"]]))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def create_buttons():
    markup = types.ReplyKeyboardMarkup(row_width=1)
    markup.add(types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥'),
               types.KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'),
               types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'),
               types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è'),
               types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π'))
    return markup

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
city_set = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def check_city_existence(city):
    url = f"https://nominatim.openstreetmap.org/search?city={city}&format=json"
    response = requests.get(url)
    data = response.json()
    if data:
        return True
    else:
        return False

def reset_state(user_id):
    if user_id in user_states:
        del user_states[user_id]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    global city_set
    latitude = message.location.latitude
    longitude = message.location.longitude
    location = geolocator.reverse(f"{latitude}, {longitude}")
    city = location.raw.get('address', {}).get('city')
    if city:
        user_cities[message.chat.id] = city
        bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ {city}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
        city_set = True
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")

    # –î–æ–±–∞–≤–∏–º –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    markup = create_buttons()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    global city_set
    markup = create_buttons()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç Smart Weather. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
def set_city(message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_city"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "waiting_city" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def check_city_existence(city, country=None):
    base_url = "https://nominatim.openstreetmap.org/search"
    params = {"q": city, "format": "json"}
    if country:
        params["countrycodes"] = country
    response = requests.get(base_url, params=params)
    data = response.json()
    if data:
        return True
    else:
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–∞
def process_city_step(message):
    user_id = message.from_user.id
    city = message.text
    country = None  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
    if check_city_existence(city, country):
        user_cities[user_id] = city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ {city}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.")
    else:
        bot.reply_to(message, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–∞
def get_weather_for_user_city(user_id, days):
    if user_id not in user_cities:
        return None
    city = user_cities[user_id]
    try:
        return get_weather(city, days)
    except Exception as e:
        return None

def today(message):
    global city_set
    user_id = message.from_user.id
    city_name = user_cities.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    data = get_weather_for_user_city(user_id, 1)

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    temperatures = {}
    for time in ["06:00", "12:00", "18:00", "00:00"]:
        temperature = get_temperature_by_time(data, time, 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 0 –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
        temperatures[time] = temperature

    weather_info = data["list"][0]
    weather_time = datetime.datetime.fromtimestamp(weather_info["dt"], tz=pytz.utc).astimezone(pytz.timezone('Europe/Moscow'))
    date = weather_time.strftime('%d-%m-%Y')
    weather_description_en = weather_info["weather"][0]["description"].capitalize()
    weather_description_ru = weather_translation.get(weather_description_en, weather_description_en)
    weather_emoji = weather_emojis.get(weather_description_ru, "")
    wind_speed = weather_info["wind"]["speed"]
    humidity = weather_info["main"]["humidity"]
    pressure = weather_info["main"]["pressure"]
    recommendation = recommend_clothing(temperatures["12:00"], weather_description_ru, humidity, wind_speed)

    bot.reply_to(message, f"–ì–æ—Ä–æ–¥: {city_name}\n"
                          f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {date}\n"
                          f"{weather_description_ru} {weather_emoji}\n"
                          f"üåï –£—Ç—Ä–æ: {temperatures.get('06:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                          f"üåñ –î–µ–Ω—å: {temperatures.get('12:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                          f"üåò –í–µ—á–µ—Ä: {temperatures.get('18:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                          f"üåë –ù–æ—á—å: {temperatures.get('00:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                          f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                          f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                          f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n"
                          f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –æ–¥–µ–∂–¥—ã: {', '.join(recommendation)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /threedays
@bot.message_handler(commands=['threedays'])
def threedays(message):
    global city_set
    user_id = message.from_user.id
    city_name = user_cities.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    data = get_weather_for_user_city(user_id, 3)

    weather_forecast = ""
    for i in range(3):
        forecast_index = i * 8  # –£—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        if forecast_index < len(data["list"]):
            weather_info = data["list"][forecast_index]
            weather_time = datetime.datetime.fromtimestamp(weather_info["dt"], tz=pytz.utc).astimezone(
                pytz.timezone('Europe/Moscow'))
            date = weather_time.strftime('%d-%m-%Y')

            # –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            target_times = ["06:00", "12:00", "18:00", "00:00"]  # —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å
            temperatures = {}
            for time in target_times:
                temperature = get_temperature_by_time(data, time, forecast_index)
                if temperature is not None:
                    temperatures[time] = temperature

            weather_description_en = weather_info["weather"][0]["description"].capitalize()
            weather_description_ru = weather_translation.get(weather_description_en, weather_description_en)
            weather_emoji = weather_emojis.get(weather_description_ru, "")
            wind_speed = weather_info["wind"]["speed"]
            humidity = weather_info["main"]["humidity"]
            pressure = weather_info["main"]["pressure"]

            forecast_for_day = (f"üìÖ {date} \n"
                                f"{weather_description_ru} {weather_emoji}\n"
                                f"üåï –£—Ç—Ä–æ: {temperatures.get('06:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåñ –î–µ–Ω—å: {temperatures.get('12:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåò –í–µ—á–µ—Ä: {temperatures.get('18:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåë –ù–æ—á—å: {temperatures.get('00:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n\n")
            weather_forecast += forecast_for_day

    bot.reply_to(message, f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–∞ 3 –¥–Ω—è:\n\n{weather_forecast}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /fivedays
@bot.message_handler(commands=['fivedays'])
def fivedays(message):
    global city_set
    user_id = message.from_user.id
    city_name = user_cities.get(user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    data = get_weather_for_user_city(user_id, 5)

    weather_forecast = ""
    for i in range(5):
        forecast_index = i * 8  # –£—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        if forecast_index < len(data["list"]):
            weather_info = data["list"][forecast_index]
            weather_time = datetime.datetime.fromtimestamp(weather_info["dt"], tz=pytz.utc).astimezone(
                pytz.timezone('Europe/Moscow'))
            date = weather_time.strftime('%d-%m-%Y')

            # –ó–∞–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            target_times = ["06:00", "12:00", "18:00", "00:00"]  # —É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å
            temperatures = {}
            for time in target_times:
                temperature = get_temperature_by_time(data, time, forecast_index)
                if temperature is not None:
                    temperatures[time] = temperature

            weather_description_en = weather_info["weather"][0]["description"].capitalize()
            weather_description_ru = weather_translation.get(weather_description_en, weather_description_en)
            weather_emoji = weather_emojis.get(weather_description_ru, "")
            wind_speed = weather_info["wind"]["speed"]
            humidity = weather_info["main"]["humidity"]
            pressure = weather_info["main"]["pressure"]

            forecast_for_day = (f"üìÖ {date} \n"
                                f"{weather_description_ru} {weather_emoji}\n"
                                f"üåï –£—Ç—Ä–æ: {temperatures.get('06:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåñ –î–µ–Ω—å: {temperatures.get('12:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåò –í–µ—á–µ—Ä: {temperatures.get('18:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"üåë –ù–æ—á—å: {temperatures.get('00:00', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}¬∞C\n"
                                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
                                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                                f"–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º —Ä—Ç. —Å—Ç.\n\n")
            weather_forecast += forecast_for_day

    bot.reply_to(message, f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–∞ 5 –¥–Ω–µ–π:\n\n{weather_forecast}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(func=lambda message: True)
def handle_messages(message):
    user_id = message.from_user.id
    if message.text == '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥':
        set_city(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        reset_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if user_id not in user_cities or user_cities[user_id] is None:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥' –∏–ª–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
        else:
            today(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è':
        reset_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if user_id not in user_cities or user_cities[user_id] is None:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥' –∏–ª–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
        else:
            threedays(message)
    elif message.text == '–ü–æ–≥–æ–¥–∞ –Ω–∞ 5 –¥–Ω–µ–π':
        reset_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        if user_id not in user_cities or user_cities[user_id] is None:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã '–í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥' –∏–ª–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'.")
        else:
            fivedays(message)
    elif message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é':
        reset_state(user_id)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        request_location(message)
    elif user_id in user_states and user_states[user_id] == "waiting_city":
        process_city_step(message)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def request_location(message):
    markup = create_buttons()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=markup)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()

